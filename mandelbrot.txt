#version 150

in VertexData
{
    vec4 v_position;
    vec3 v_normal;
    vec2 v_texcoord;
} inData;

out vec4 fragColor;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

uniform vec2 iResolution;
uniform float iTime;
uniform float iTimeDelta;
uniform int iFrame;
uniform vec4 iMouse;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform sampler2D iChannel2;
uniform sampler2D iChannel3;
uniform vec4 iDate;
uniform float iSampleRate;

void mainImage(out vec4, in vec2);
void main(void) { mainImage(fragColor,inData.v_texcoord * iResolution.xy); }

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#define AA 1
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 col = vec3(0.0);
#if AA>1
    for( int m=0; m<AA; m++ )
    for( int n=0; n<AA; n++ )
    {
        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))/float(AA)))/iResolution.y;
        float w = float(AA*m+n);
        float time = iTime + 0.5*(1.0/24.0)*w/float(AA*AA);
#else    
        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;
        float time = iTime;
#endif
    float timeScale = .1;
    float zoo = .8 + 0.4*cos(timeScale*time);
    zoo = pow(zoo, 7.0);        
    vec2 c = vec2(-1.402,0) + p*zoo;
    
    const float B = 256.0;
    float l = 0.0; //depth
    vec2 z  = vec2(0.0);
        
    for( int i=0; i<500; i++ )
    {
        // z = z*z + c      
        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;
        if( dot(z,z)>(B*B) ) break;
        l += 1.0;
    }
    // ------------------------------------------------------
    // smooth interation count
//    float sl = l - log(log(length(z))/log(B))/log(2.0);
        
    // equivalent optimized smooth interation count
    float sl = l - log2(log2(dot(z,z))) + 4.0; 
    // ------------------------------------------------------
    float al = smoothstep( -0.1, 0.0, sin(0.5*6.2831*iTime ) );
    l = mix( l, sl, al );
    l = sl;
    col += 0.5 + 0.5*cos( 3.0 + l*0.1 + vec3(0.0,0.5,1.0));
//    col = vec3(pow(col.x,2),pow(col.y,2),pow(col.z,2));
#if AA>1
    }
    col /= float(AA*AA);
#endif
    fragColor = vec4( col, 1.0 );
}
